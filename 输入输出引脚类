// 输入输出引脚类
class InputOutput : public CircuitElement {
public:
    InputOutput(ElementType type, int x, int y, const wxString& name = "")
        : CircuitElement(type, x, y), value(false), customName(name) {
        if (type == TYPE_INPUT) {
            pins.push_back(std::make_unique<Pin>(x + 20, y, false, this)); // 输出引脚
        }
        else {
            pins.push_back(std::make_unique<Pin>(x - 20, y, true, this)); // 输入引脚
        }
    }

    virtual void Draw(wxDC& dc) override {
        dc.SetPen(selected ? wxPen(*wxRED, 2) : wxPen(*wxBLACK, 1));
        dc.SetBrush(value ? *wxGREEN_BRUSH : *wxWHITE_BRUSH);

        dc.DrawRectangle(posX - 15, posY - 15, 30, 30);

        wxString label;
        if (!customName.empty()) {
            label = customName;
        }
        else if (type == TYPE_INPUT) {
            label = "IN";
        }
        else {
            label = "OUT";
        }
        dc.DrawText(label, posX - (label.Length() > 2 ? 12 : 7), posY - 7);

        // 显示当前值
        dc.SetTextForeground(*wxRED);
        wxString valueText = value ? "1" : "0";
        wxSize textSize = dc.GetTextExtent(valueText);

        if (type == TYPE_INPUT) {
            dc.DrawText(valueText, posX + 15 - textSize.GetWidth() - 2, posY - textSize.GetHeight() / 2);
        }
        else {
            dc.DrawText(valueText, posX - 15 + 2, posY - textSize.GetHeight() / 2);
        }

        // 绘制引脚
        dc.SetPen(*wxBLACK_PEN);
        dc.SetTextForeground(*wxBLACK);
        for (auto& pin : pins) {
            dc.DrawCircle(pin->GetX(), pin->GetY(), 3);
        }
    }

    virtual void Update() override {
        // 对于输入元件：把自身的 value 写到它的输出引脚（驱动信号）
        if (type == TYPE_INPUT) {
            if (!pins.empty()) {
                // pins[0] 是输出引脚（构造时如此）
                pins[0]->SetValue(value);
            }
        }
        // 对于输出元件：从连接的输入引脚读值到自身 value（显示/记录输出）
        else if (type == TYPE_OUTPUT) {
            if (!pins.empty()) {
                // pins[0] 是输入引脚（构造时如此）
                value = pins[0]->GetValue();
            }
        }
    }



    void SetValue(bool val) { value = val; }
    bool GetValue() const { return value; }
    void SetName(const wxString& name) { customName = name; }
    wxString GetCustomName() const { return customName; }

    virtual std::vector<Pin*> GetPins() override {
        std::vector<Pin*> pinPtrs;
        for (auto& pin : pins) {
            pinPtrs.push_back(pin.get());
        }
        return pinPtrs;
    }

    virtual wxRect GetBoundingBox() const override {
        return wxRect(posX - 15, posY - 15, 30, 30);
    }

    virtual wxString GetName() const override {
        return type == TYPE_INPUT ? "INPUT" : "OUTPUT";
    }

    virtual wxString GetDisplayName() const override {
        if (!customName.empty()) {
            return customName;
        }
        return type == TYPE_INPUT ? "Input Pin" : "Output Pin";
    }

    virtual void Serialize(wxString& data) const override {
        data += wxString::Format("%d,%d,%d,%d,%s,", type, posX, posY, value ? 1 : 0, customName);
    }

    virtual void Deserialize(const wxString& data) override {
        wxStringTokenizer tokenizer(data, ",");
        if (tokenizer.CountTokens() >= 4) {
            long typeVal, x, y, val;
            tokenizer.GetNextToken().ToLong(&typeVal);
            tokenizer.GetNextToken().ToLong(&x);
            tokenizer.GetNextToken().ToLong(&y);
            tokenizer.GetNextToken().ToLong(&val);
            SetPosition(x, y);
            value = val != 0;

            if (tokenizer.HasMoreTokens()) {
                customName = tokenizer.GetNextToken();
            }
        }
    }

    virtual void GetProperties(wxPropertyGrid* pg) const override {
        pg->Append(new wxStringProperty("Type", "Type", GetDisplayName()));
        pg->Append(new wxIntProperty("X Position", "X", posX));
        pg->Append(new wxIntProperty("Y Position", "Y", posY));
        pg->Append(new wxStringProperty("Name", "Name", customName));
        pg->Append(new wxBoolProperty("Value", "Value", value));
    }

    virtual void SetProperties(wxPropertyGrid* pg) override {
        wxVariant xVar = pg->GetPropertyValue("X");
        wxVariant yVar = pg->GetPropertyValue("Y");
        wxVariant nameVar = pg->GetPropertyValue("Name");
        wxVariant valueVar = pg->GetPropertyValue("Value");

        if (xVar.IsType("long") && yVar.IsType("long")) {
            SetPosition(xVar.GetLong(), yVar.GetLong());
        }
        if (nameVar.IsType("string")) {
            customName = nameVar.GetString();
        }
        if (valueVar.IsType("bool")) {
            value = valueVar.GetBool();
        }
    }

private:
    std::vector<std::unique_ptr<Pin>> pins;
    bool value;
    wxString customName;
};
